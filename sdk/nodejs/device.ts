// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceState, opts?: pulumi.CustomResourceOptions): Device {
        return new Device(name, <any>state, { ...opts, id: id });
    }

    /**
     * The class associated to the device.
     */
    public readonly class: pulumi.Output<string | undefined>;
    /**
     * The class parameters associated to device.
     */
    public readonly classParameters: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The name of the device to create.
     */
    public readonly name: pulumi.Output<string>;

    /**
     * Create a Device resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceArgs | DeviceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DeviceState = argsOrState as DeviceState | undefined;
            inputs["class"] = state ? state.class : undefined;
            inputs["classParameters"] = state ? state.classParameters : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DeviceArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["class"] = args ? args.class : undefined;
            inputs["classParameters"] = args ? args.classParameters : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        super("solidserver:index/device:Device", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Device resources.
 */
export interface DeviceState {
    /**
     * The class associated to the device.
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The class parameters associated to device.
     */
    readonly classParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the device to create.
     */
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Device resource.
 */
export interface DeviceArgs {
    /**
     * The class associated to the device.
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The class parameters associated to device.
     */
    readonly classParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the device to create.
     */
    readonly name: pulumi.Input<string>;
}
