// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DNSZone extends pulumi.CustomResource {
    /**
     * Get an existing DNSZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DNSZoneState, opts?: pulumi.CustomResourceOptions): DNSZone {
        return new DNSZone(name, <any>state, { ...opts, id: id });
    }

    /**
     * The class associated to the zone.
     */
    public readonly class: pulumi.Output<string | undefined>;
    /**
     * The class parameters associated to the zone.
     */
    public readonly classParameters: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Automaticaly create PTR records for the zone.
     */
    public readonly createptr: pulumi.Output<boolean | undefined>;
    /**
     * The managed SMART DNS server name, or DNS server name hosting the zone.
     */
    public readonly dnsserver: pulumi.Output<string>;
    /**
     * The Domain Name served by the zone.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * The type of the zone to create (Supported: Master).
     */
    public readonly type: pulumi.Output<string | undefined>;
    /**
     * The DNS view name hosting the zone.
     */
    public readonly view: pulumi.Output<string | undefined>;

    /**
     * Create a DNSZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DNSZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DNSZoneArgs | DNSZoneState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DNSZoneState = argsOrState as DNSZoneState | undefined;
            inputs["class"] = state ? state.class : undefined;
            inputs["classParameters"] = state ? state.classParameters : undefined;
            inputs["createptr"] = state ? state.createptr : undefined;
            inputs["dnsserver"] = state ? state.dnsserver : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["view"] = state ? state.view : undefined;
        } else {
            const args = argsOrState as DNSZoneArgs | undefined;
            if (!args || args.dnsserver === undefined) {
                throw new Error("Missing required property 'dnsserver'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["class"] = args ? args.class : undefined;
            inputs["classParameters"] = args ? args.classParameters : undefined;
            inputs["createptr"] = args ? args.createptr : undefined;
            inputs["dnsserver"] = args ? args.dnsserver : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["view"] = args ? args.view : undefined;
        }
        super("solidserver:index/dNSZone:DNSZone", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DNSZone resources.
 */
export interface DNSZoneState {
    /**
     * The class associated to the zone.
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the zone.
     */
    readonly classParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * Automaticaly create PTR records for the zone.
     */
    readonly createptr?: pulumi.Input<boolean>;
    /**
     * The managed SMART DNS server name, or DNS server name hosting the zone.
     */
    readonly dnsserver?: pulumi.Input<string>;
    /**
     * The Domain Name served by the zone.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The type of the zone to create (Supported: Master).
     */
    readonly type?: pulumi.Input<string>;
    /**
     * The DNS view name hosting the zone.
     */
    readonly view?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DNSZone resource.
 */
export interface DNSZoneArgs {
    /**
     * The class associated to the zone.
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the zone.
     */
    readonly classParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * Automaticaly create PTR records for the zone.
     */
    readonly createptr?: pulumi.Input<boolean>;
    /**
     * The managed SMART DNS server name, or DNS server name hosting the zone.
     */
    readonly dnsserver: pulumi.Input<string>;
    /**
     * The Domain Name served by the zone.
     */
    readonly name: pulumi.Input<string>;
    /**
     * The type of the zone to create (Supported: Master).
     */
    readonly type?: pulumi.Input<string>;
    /**
     * The DNS view name hosting the zone.
     */
    readonly view?: pulumi.Input<string>;
}
