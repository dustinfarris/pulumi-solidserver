// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type IPSubnet struct {
	s *pulumi.ResourceState
}

// NewIPSubnet registers a new resource with the given unique name, arguments, and options.
func NewIPSubnet(ctx *pulumi.Context,
	name string, args *IPSubnetArgs, opts ...pulumi.ResourceOpt) (*IPSubnet, error) {
	if args == nil || args.Block == nil {
		return nil, errors.New("missing required argument 'Block'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil || args.Space == nil {
		return nil, errors.New("missing required argument 'Space'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["block"] = nil
		inputs["class"] = nil
		inputs["classParameters"] = nil
		inputs["gatewayOffset"] = nil
		inputs["name"] = nil
		inputs["size"] = nil
		inputs["space"] = nil
		inputs["terminal"] = nil
	} else {
		inputs["block"] = args.Block
		inputs["class"] = args.Class
		inputs["classParameters"] = args.ClassParameters
		inputs["gatewayOffset"] = args.GatewayOffset
		inputs["name"] = args.Name
		inputs["size"] = args.Size
		inputs["space"] = args.Space
		inputs["terminal"] = args.Terminal
	}
	inputs["gateway"] = nil
	inputs["prefix"] = nil
	s, err := ctx.RegisterResource("solidserver:index/iPSubnet:IPSubnet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPSubnet{s: s}, nil
}

// GetIPSubnet gets an existing IPSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPSubnet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IPSubnetState, opts ...pulumi.ResourceOpt) (*IPSubnet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["block"] = state.Block
		inputs["class"] = state.Class
		inputs["classParameters"] = state.ClassParameters
		inputs["gateway"] = state.Gateway
		inputs["gatewayOffset"] = state.GatewayOffset
		inputs["name"] = state.Name
		inputs["prefix"] = state.Prefix
		inputs["size"] = state.Size
		inputs["space"] = state.Space
		inputs["terminal"] = state.Terminal
	}
	s, err := ctx.ReadResource("solidserver:index/iPSubnet:IPSubnet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPSubnet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IPSubnet) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IPSubnet) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the block intyo which creating the IP subnet.
func (r *IPSubnet) Block() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["block"])
}

// The class associated to the IP subnet.
func (r *IPSubnet) Class() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["class"])
}

// The class parameters associated to the IP subnet.
func (r *IPSubnet) ClassParameters() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["classParameters"])
}

// The subnet's computed gateway.
func (r *IPSubnet) Gateway() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gateway"])
}

// Offset for creating the gateway. Default is 0 (No gateway).
func (r *IPSubnet) GatewayOffset() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["gatewayOffset"])
}

// The name of the IP subnet to create.
func (r *IPSubnet) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The provisionned IP prefix.
func (r *IPSubnet) Prefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["prefix"])
}

// The expected IP subnet's prefix length (ex: 24 for a '/24').
func (r *IPSubnet) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// The name of the space into which creating the subnet.
func (r *IPSubnet) Space() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["space"])
}

// The terminal property of the IP subnet.
func (r *IPSubnet) Terminal() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["terminal"])
}

// Input properties used for looking up and filtering IPSubnet resources.
type IPSubnetState struct {
	// The name of the block intyo which creating the IP subnet.
	Block interface{}
	// The class associated to the IP subnet.
	Class interface{}
	// The class parameters associated to the IP subnet.
	ClassParameters interface{}
	// The subnet's computed gateway.
	Gateway interface{}
	// Offset for creating the gateway. Default is 0 (No gateway).
	GatewayOffset interface{}
	// The name of the IP subnet to create.
	Name interface{}
	// The provisionned IP prefix.
	Prefix interface{}
	// The expected IP subnet's prefix length (ex: 24 for a '/24').
	Size interface{}
	// The name of the space into which creating the subnet.
	Space interface{}
	// The terminal property of the IP subnet.
	Terminal interface{}
}

// The set of arguments for constructing a IPSubnet resource.
type IPSubnetArgs struct {
	// The name of the block intyo which creating the IP subnet.
	Block interface{}
	// The class associated to the IP subnet.
	Class interface{}
	// The class parameters associated to the IP subnet.
	ClassParameters interface{}
	// Offset for creating the gateway. Default is 0 (No gateway).
	GatewayOffset interface{}
	// The name of the IP subnet to create.
	Name interface{}
	// The expected IP subnet's prefix length (ex: 24 for a '/24').
	Size interface{}
	// The name of the space into which creating the subnet.
	Space interface{}
	// The terminal property of the IP subnet.
	Terminal interface{}
}
