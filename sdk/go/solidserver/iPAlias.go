// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type IPAlias struct {
	s *pulumi.ResourceState
}

// NewIPAlias registers a new resource with the given unique name, arguments, and options.
func NewIPAlias(ctx *pulumi.Context,
	name string, args *IPAliasArgs, opts ...pulumi.ResourceOpt) (*IPAlias, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Space == nil {
		return nil, errors.New("missing required argument 'Space'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["name"] = nil
		inputs["space"] = nil
		inputs["type"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["name"] = args.Name
		inputs["space"] = args.Space
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("solidserver:index/iPAlias:IPAlias", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPAlias{s: s}, nil
}

// GetIPAlias gets an existing IPAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAlias(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IPAliasState, opts ...pulumi.ResourceOpt) (*IPAlias, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["name"] = state.Name
		inputs["space"] = state.Space
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("solidserver:index/iPAlias:IPAlias", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPAlias{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IPAlias) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IPAlias) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The IP address for which the alias will be associated to.
func (r *IPAlias) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// The FQDN of the IP address alias to create.
func (r *IPAlias) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the space to which the address belong to.
func (r *IPAlias) Space() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["space"])
}

// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
func (r *IPAlias) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering IPAlias resources.
type IPAliasState struct {
	// The IP address for which the alias will be associated to.
	Address interface{}
	// The FQDN of the IP address alias to create.
	Name interface{}
	// The name of the space to which the address belong to.
	Space interface{}
	// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
	Type interface{}
}

// The set of arguments for constructing a IPAlias resource.
type IPAliasArgs struct {
	// The IP address for which the alias will be associated to.
	Address interface{}
	// The FQDN of the IP address alias to create.
	Name interface{}
	// The name of the space to which the address belong to.
	Space interface{}
	// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
	Type interface{}
}
