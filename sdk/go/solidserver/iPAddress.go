// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type IPAddress struct {
	s *pulumi.ResourceState
}

// NewIPAddress registers a new resource with the given unique name, arguments, and options.
func NewIPAddress(ctx *pulumi.Context,
	name string, args *IPAddressArgs, opts ...pulumi.ResourceOpt) (*IPAddress, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Space == nil {
		return nil, errors.New("missing required argument 'Space'")
	}
	if args == nil || args.Subnet == nil {
		return nil, errors.New("missing required argument 'Subnet'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["class"] = nil
		inputs["classParameters"] = nil
		inputs["device"] = nil
		inputs["mac"] = nil
		inputs["name"] = nil
		inputs["requestIp"] = nil
		inputs["space"] = nil
		inputs["subnet"] = nil
	} else {
		inputs["class"] = args.Class
		inputs["classParameters"] = args.ClassParameters
		inputs["device"] = args.Device
		inputs["mac"] = args.Mac
		inputs["name"] = args.Name
		inputs["requestIp"] = args.RequestIp
		inputs["space"] = args.Space
		inputs["subnet"] = args.Subnet
	}
	inputs["address"] = nil
	s, err := ctx.RegisterResource("solidserver:index/iPAddress:IPAddress", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPAddress{s: s}, nil
}

// GetIPAddress gets an existing IPAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAddress(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IPAddressState, opts ...pulumi.ResourceOpt) (*IPAddress, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["class"] = state.Class
		inputs["classParameters"] = state.ClassParameters
		inputs["device"] = state.Device
		inputs["mac"] = state.Mac
		inputs["name"] = state.Name
		inputs["requestIp"] = state.RequestIp
		inputs["space"] = state.Space
		inputs["subnet"] = state.Subnet
	}
	s, err := ctx.ReadResource("solidserver:index/iPAddress:IPAddress", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPAddress{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IPAddress) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IPAddress) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The provisionned IP address.
func (r *IPAddress) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// The class associated to the IP address.
func (r *IPAddress) Class() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["class"])
}

// The class parameters associated to the IP address.
func (r *IPAddress) ClassParameters() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["classParameters"])
}

// Device Name to associate with the IP address (Require a 'Device Manager' license).
func (r *IPAddress) Device() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["device"])
}

// The MAC Address of the IP address to create.
func (r *IPAddress) Mac() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mac"])
}

// The short name or FQDN of the IP address to create.
func (r *IPAddress) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The optionally requested IP address.
func (r *IPAddress) RequestIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["requestIp"])
}

// The name of the space into which creating the IP address.
func (r *IPAddress) Space() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["space"])
}

// The name of the subnet into which creating the IP address.
func (r *IPAddress) Subnet() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnet"])
}

// Input properties used for looking up and filtering IPAddress resources.
type IPAddressState struct {
	// The provisionned IP address.
	Address interface{}
	// The class associated to the IP address.
	Class interface{}
	// The class parameters associated to the IP address.
	ClassParameters interface{}
	// Device Name to associate with the IP address (Require a 'Device Manager' license).
	Device interface{}
	// The MAC Address of the IP address to create.
	Mac interface{}
	// The short name or FQDN of the IP address to create.
	Name interface{}
	// The optionally requested IP address.
	RequestIp interface{}
	// The name of the space into which creating the IP address.
	Space interface{}
	// The name of the subnet into which creating the IP address.
	Subnet interface{}
}

// The set of arguments for constructing a IPAddress resource.
type IPAddressArgs struct {
	// The class associated to the IP address.
	Class interface{}
	// The class parameters associated to the IP address.
	ClassParameters interface{}
	// Device Name to associate with the IP address (Require a 'Device Manager' license).
	Device interface{}
	// The MAC Address of the IP address to create.
	Mac interface{}
	// The short name or FQDN of the IP address to create.
	Name interface{}
	// The optionally requested IP address.
	RequestIp interface{}
	// The name of the space into which creating the IP address.
	Space interface{}
	// The name of the subnet into which creating the IP address.
	Subnet interface{}
}
