// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type DNSZone struct {
	s *pulumi.ResourceState
}

// NewDNSZone registers a new resource with the given unique name, arguments, and options.
func NewDNSZone(ctx *pulumi.Context,
	name string, args *DNSZoneArgs, opts ...pulumi.ResourceOpt) (*DNSZone, error) {
	if args == nil || args.Dnsserver == nil {
		return nil, errors.New("missing required argument 'Dnsserver'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["class"] = nil
		inputs["classParameters"] = nil
		inputs["createptr"] = nil
		inputs["dnsserver"] = nil
		inputs["name"] = nil
		inputs["type"] = nil
		inputs["view"] = nil
	} else {
		inputs["class"] = args.Class
		inputs["classParameters"] = args.ClassParameters
		inputs["createptr"] = args.Createptr
		inputs["dnsserver"] = args.Dnsserver
		inputs["name"] = args.Name
		inputs["type"] = args.Type
		inputs["view"] = args.View
	}
	s, err := ctx.RegisterResource("solidserver:index/dNSZone:DNSZone", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DNSZone{s: s}, nil
}

// GetDNSZone gets an existing DNSZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSZone(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DNSZoneState, opts ...pulumi.ResourceOpt) (*DNSZone, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["class"] = state.Class
		inputs["classParameters"] = state.ClassParameters
		inputs["createptr"] = state.Createptr
		inputs["dnsserver"] = state.Dnsserver
		inputs["name"] = state.Name
		inputs["type"] = state.Type
		inputs["view"] = state.View
	}
	s, err := ctx.ReadResource("solidserver:index/dNSZone:DNSZone", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DNSZone{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DNSZone) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DNSZone) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The class associated to the zone.
func (r *DNSZone) Class() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["class"])
}

// The class parameters associated to the zone.
func (r *DNSZone) ClassParameters() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["classParameters"])
}

// Automaticaly create PTR records for the zone.
func (r *DNSZone) Createptr() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["createptr"])
}

// The managed SMART DNS server name, or DNS server name hosting the zone.
func (r *DNSZone) Dnsserver() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dnsserver"])
}

// The Domain Name served by the zone.
func (r *DNSZone) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The type of the zone to create (Supported: Master).
func (r *DNSZone) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The DNS view name hosting the zone.
func (r *DNSZone) View() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["view"])
}

// Input properties used for looking up and filtering DNSZone resources.
type DNSZoneState struct {
	// The class associated to the zone.
	Class interface{}
	// The class parameters associated to the zone.
	ClassParameters interface{}
	// Automaticaly create PTR records for the zone.
	Createptr interface{}
	// The managed SMART DNS server name, or DNS server name hosting the zone.
	Dnsserver interface{}
	// The Domain Name served by the zone.
	Name interface{}
	// The type of the zone to create (Supported: Master).
	Type interface{}
	// The DNS view name hosting the zone.
	View interface{}
}

// The set of arguments for constructing a DNSZone resource.
type DNSZoneArgs struct {
	// The class associated to the zone.
	Class interface{}
	// The class parameters associated to the zone.
	ClassParameters interface{}
	// Automaticaly create PTR records for the zone.
	Createptr interface{}
	// The managed SMART DNS server name, or DNS server name hosting the zone.
	Dnsserver interface{}
	// The Domain Name served by the zone.
	Name interface{}
	// The type of the zone to create (Supported: Master).
	Type interface{}
	// The DNS view name hosting the zone.
	View interface{}
}
